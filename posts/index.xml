<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - Ryutaro note</title><link>https://ryutaro-a.github.io/ryutaro1104/posts/</link><description>All Posts | Ryutaro note</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 29 May 2022 12:38:06 +0900</lastBuildDate><atom:link href="https://ryutaro-a.github.io/ryutaro1104/posts/" rel="self" type="application/rss+xml"/><item><title>言語処理100本ノックのための環境構築</title><link>https://ryutaro-a.github.io/ryutaro1104/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86100%E6%9C%AC%E3%83%8E%E3%83%83%E3%82%AF%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</link><pubDate>Sun, 29 May 2022 12:38:06 +0900</pubDate><guid>https://ryutaro-a.github.io/ryutaro1104/%E8%A8%80%E8%AA%9E%E5%87%A6%E7%90%86100%E6%9C%AC%E3%83%8E%E3%83%83%E3%82%AF%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/</guid><description>はじめに みなさんは言語処理100本ノックを知っていますか？
言語処理100本ノックとは東工大の岡崎直観先生らによって言語処理を楽しく学ぶことを目的として作成された問題集です。
私の所属している研究室でも初学者向けの教材として利用されていますが、環境構築で躓いている人がかなりいたため、研究室内のページで環境構築の解説を作成しました。
しかし研究室内向けだけでは勿体ないと思い、この度Qiitanに投稿することにしました。
検索しても言語処理100本ノックのためのまとまった環境構築方法がなかったというのも大きな理由です。
注意 本記事で紹介している環境構築方法は言語処理100本ノックを解くことを主目的としているため、ほかの用途には適さなかったり、無駄が多かったりしますので、予めご了承ください。
また、本記事はWindowsユーザ向けなのでMacユーザの方は適宜読み替えたりしてください。
要望が上がればMac端末で動作を検証してからMac向けの記事を書くかもしれません。
環境構築 まずはWSLを入れよう！ 言語処理100本ノックを解く上で一番簡単かつ解きやすい環境としてWSLというものがあります。
これはubuntuと呼ばれるLinux系のOSをWindows内に仮想的に作れるようにしたツールで、2ステップで簡単に導入できます。
ステップ1 Windows側でWSLが使用できるように機能を有効化します。
wiindowsボタンを押してからwindowsと検索して、Windowsの機能の有効化または無効化という項目をクリックしてください。
画像で言うと赤枠の部分です。
すると様々な項目が表示されるので、Linux用Windowsサブシステムにチェックを入れてください。
こちらも画像で言うと赤枠の部分です。
これでステップ1は完了です。
ステップ2 続いてWSL本体のダウンロードです。
スタート画面などからMicrosoft Storeにアクセスしてubuntuと検索してください。
様々なバージョンが表示されますが、ここではUbuntu20.04LTSをダウンロードしましょう。（ちななみにLTSはLong Time Supportの略、つまり安定板のようなものです）
ダウンロード出来たらスタート画面などから先ほどダウンロードしたUbuntu20.04LTSを起動してください。
Pyenvの導入 Pythonのバージョン管理に便利なPyenvを導入します。
なぜバージョンなんて管理するの？と思われるかもしれません。
言語処理100本ノックを解く上では１つのバージョンで事足りますが、Pythonを使っていると使いたいライブラリが一定のバージョンにしか対応していないなどということがかなりの頻度で現れます。
そんなときにPyenvでバージョンを管理しておくと1つのコマンドを打つだけで好きなバージョンのPythonに切り替えることができます。よって本記事ではPyenvの使用を強く推奨します。
Pyenvの導入は簡単で、WSL上で以下のコマンドをすべて打つだけで終わりです。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 依存パッケージの導入 $ sudo apt install -y build-essential $ sudo apt install -y libffi-dev $ sudo apt install -y libssl-dev # openssl $ sudo apt install -y zlib1g-dev $ sudo apt install -y libbz2-dev libreadline-dev libsqlite3-dev # sqlite3, bz2, readline $ sudo apt install -y git $ cd $ git clone https://github.</description></item></channel></rss>