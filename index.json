[{"categories":["環境構築"],"content":"はじめに こんにちは！りゅうです。 今日は最近？流行っているfairseqをColabを使って簡単に動かす方法を紹介します。 私が指導教授や研究室の同期に触発されて、Colabで動かそうと思ったときにそのままでは動かなかったので備忘録としてその手順をここに書いておこうと思います。（ちなみに1回動かして以降使ってない・・・） ちなみにfairseqとは、Facebookの人工知能研究チームが開発した機械学習用(主にTransformer)のフレームワークです。 Pytorchで作成されていることから有志によって確立された改造方法も存在し、論文でも見かけたりと、研究でも使われるようになっていると思います。 以下公式GitHub↓ ","date":"2022-05-29","objectID":"/fairseq-env/:1:0","tags":["環境構築","Python","Colab"],"title":"Google Colabでfairseq入門","uri":"/fairseq-env/"},{"categories":["環境構築"],"content":"参考 ","date":"2022-05-29","objectID":"/fairseq-env/:2:0","tags":["環境構築","Python","Colab"],"title":"Google Colabでfairseq入門","uri":"/fairseq-env/"},{"categories":["環境構築"],"content":"fairseqの導入 fairseqのインストールは公式Githubにあるものをそのままコピーして使います。 git clone https://github.com/pytorch/fairseq cd fairseq pip install --editable ./ 上記コマンドでインストールしてから fairseq-train #エラー文 No package metadata was found for fairseq コマンドを試しに打ってみた際に発生したエラーです。 公式githubのissueによるとパスが通っていないことが原因のようでした。 そこで以下のようにPYTHONPATHにfairseqがある場所を追加してあげます。 import os os.environ['PYTHONPATH'] += \":/content/fairseq/\" ! echo $PYTHONPATH この操作でパスが通ってfairseq-trainなどのコマンドが使えるようになります。 fairseq本体ディレクトリのパスさえ通せばいいので、パスの部分は適宜書き換えて使ってみてください。 それでは良きfairseqライフを。 ","date":"2022-05-29","objectID":"/fairseq-env/:3:0","tags":["環境構築","Python","Colab"],"title":"Google Colabでfairseq入門","uri":"/fairseq-env/"},{"categories":["機械学習"],"content":"はじめに 機械学習に関する入門サイト見ていると、難しいことが書いてあったりして、知識０の人がとっつきにくい印象があります。 まあテーマとして確かに難しいのでしょうがないですが…. 「数学や機械学習の知識が0でも、pythonの知識さえあれば誰でも実装できる」というのを目標に記事を書いていきたいと思います。 今回の記事では難しいことは説明せず、とりあえず機械学習というものに触れてみるというスタンスで、進めていきます。 ","date":"2022-05-29","objectID":"/fundamental_svm/:1:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["機械学習"],"content":"対象者 ・pythonがある程度わかる ・機械学習に興味があるけど、何も知らない ・大学の授業で概要は学んだけど、実際にどう実装すればいいかわからない ","date":"2022-05-29","objectID":"/fundamental_svm/:2:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["機械学習"],"content":"環境 python 3.8.5 scikit-learn 0.231 ##まずはインストール pip install scikit-learn csvファイルの読み込みにnumpyを使うのでインストール済みでない方はインストールしてください。 pip install numpy ","date":"2022-05-29","objectID":"/fundamental_svm/:3:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["機械学習"],"content":"用語解説 ######scikit-learnとは scikit-learn （サイキット・ラーン）(旧称：scikits.learn) はPythonのオープンソース機械学習ライブラリ[2]である。サポートベクターマシン、ランダムフォレスト、Gradient Boosting（英語版）、k近傍法、DBSCANなどを含む様々な分類、回帰、クラスタリングアルゴリズムを備えており、Pythonの数値計算ライブラリのNumPyとSciPyとやり取りするよう設計されている。(wikipediaより） うん、まあこれを見ても意味がわからないと思うので、今回は簡単に、「機械学習をサポートしてくれるライブラリ」と覚えておきましょう。 SVMとは サポートベクターマシン（英: support vector machine, SVM）は、教師あり学習を用いるパターン認識モデルの一つである。分類や回帰へ適用できる。 サポートベクターマシンは、現在知られている手法の中でも認識性能が優れた学習モデルの一つである。サポートベクターマシンが優れた認識性能を発揮することができる理由は、未学習データに対して高い識別性能を得るための工夫があるためである。（wikipediaより） 簡単に言うと、下記の画像のように線を引いて、データを分類していく機械学習手法*のことです。 一口に機械学習といっても様々な方法が存在します。 SVM(サポートベクターマシン)はその一つです。 https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Kernel_Machine.svg/2880px-Kernel_Machine.svg.png (wikipediaより) 目的変数とは 機械学習で予測したい対象です。 例えば、天気を予測したいときの目的変数は晴れや、曇りや雨などになります。 説明変数とは 予測するために必要な情報のことです。 例えば、天気を予測したいときに必要な、降水量や湿度などがこれにあたります。 ","date":"2022-05-29","objectID":"/fundamental_svm/:4:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["機械学習"],"content":"データ データは基本的には数が多いほど精度が高くなりますが、今回はお試しなので、少なめのデータを用意します。 このデータは今年の天気のデータです。 まあ天気データは気象庁のHPにいくらでもあるので、興味が湧いたら見てみてください。 左から、 気温、降水量、日照時間、湿度、天気(0:晴れ、1:曇り、2:雨) を表しています。 このデータで言うと、気温、降水量、日照時間、湿度までが説明変数、**天気(0:晴れ、1:曇り、2:雨)**が目的変数です。 6.6,0,8.2,47,0 7.1,0,5.7,57,1 7.1,0,9.3,62,0 8.1,0,4.7,53,1 6.5,0,9.7,54,0 8,0,8.1,42,1 6.6,1.5,0.5,68,2 5.7,21.5,2.7,94,2 11.2,0,9.3,47,0 9,0,7.9,57,1 8,0,4.5,66,1 7.7,0,1.8,66,2 9.1,0,9.3,70,0 9.1,0,8.3,70,0 7.8,11.5,3.6,79,2 7.6,0,4.4,46,1 7.6,0,3.6,58,1 3.8,13.5,0,87,2 7.3,0,8,62,1 8.3,0,9.7,60,0 ","date":"2022-05-29","objectID":"/fundamental_svm/:5:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["機械学習"],"content":"ソースコード weatherを自分の好きな値に変えることで、その条件の時の天気を予測することができます。（ただ、データ数が少ないので、精度は悪いです） weatherの中でも左から順に 気温、降水量、日照時間、湿度 で並んでいるので、この順に条件を入れてみてください。 import numpy as np from sklearn import svm ##csvファイルの読み込み npArray = np.loadtxt(\"data.csv\", delimiter = \",\", dtype = \"float\") ## 説明変数の格納 x = npArray[:, 0:4] ##目的変数の格納 y = npArray[:, 4:5].ravel() ##学習手法にSVMを選択 model = svm.SVC() ##学習 model.fit(x,y) ##評価データ(ここは自分で好きな値を入力) weather = [[9,0,7.9,6.5]] ##predict関数で、評価データの天気を予測 ans = model.predict(weather) if ans == 0: print(\"晴れです\") if ans == 1: print(\"曇りです\") if ans == 2: print(\"雨です\") ","date":"2022-05-29","objectID":"/fundamental_svm/:6:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["機械学習"],"content":"実行結果 $ python3 weather_learn.py 晴れです ","date":"2022-05-29","objectID":"/fundamental_svm/:7:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["機械学習"],"content":"おわりに 今回もお疲れ様でした。 実際に自分が作ったものがこうして結果を吐いてくれるのは嬉しいものがありますよね。 自分が機械学習に初めて触れたときはあまりの情報量の多さに行き詰まったことが何度もありました。 この記事では、「知識はないけど、機械学習に触れてみたい」という方に向けてわかりやすく書いたつもりですが、疑問点やミスがありましたらコメントください。 それでは、また。 ","date":"2022-05-29","objectID":"/fundamental_svm/:8:0","tags":["Python","NLP"],"title":"SVMで超機械学習入門！","uri":"/fundamental_svm/"},{"categories":["環境構築"],"content":"はじめに みなさんは言語処理100本ノックを知っていますか？ 言語処理100本ノックとは東工大の岡崎直観先生らによって言語処理を楽しく学ぶことを目的として作成された問題集です。 私の所属している研究室でも初学者向けの教材として利用されていますが、環境構築で躓いている人がかなりいたため、研究室内のページで環境構築の解説を作成しました。 しかし研究室内向けだけでは勿体ないと思い、この度Qiitanに投稿することにしました。 検索しても言語処理100本ノックのためのまとまった環境構築方法がなかったというのも大きな理由です。 ","date":"2022-05-29","objectID":"/nlp100-env/:1:0","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"注意 本記事で紹介している環境構築方法は言語処理100本ノックを解くことを主目的としているため、ほかの用途には適さなかったり、無駄が多かったりしますので、予めご了承ください。 また、本記事はWindowsユーザ向けなのでMacユーザの方は適宜読み替えたりしてください。 要望が上がればMac端末で動作を検証してからMac向けの記事を書くかもしれません。 ","date":"2022-05-29","objectID":"/nlp100-env/:2:0","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"環境構築 ","date":"2022-05-29","objectID":"/nlp100-env/:3:0","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"まずはWSLを入れよう！ 言語処理100本ノックを解く上で一番簡単かつ解きやすい環境としてWSLというものがあります。 これはubuntuと呼ばれるLinux系のOSをWindows内に仮想的に作れるようにしたツールで、2ステップで簡単に導入できます。 ステップ1 Windows側でWSLが使用できるように機能を有効化します。 wiindowsボタンを押してからwindowsと検索して、Windowsの機能の有効化または無効化という項目をクリックしてください。 画像で言うと赤枠の部分です。 すると様々な項目が表示されるので、Linux用Windowsサブシステムにチェックを入れてください。 こちらも画像で言うと赤枠の部分です。 これでステップ1は完了です。 ステップ2 続いてWSL本体のダウンロードです。 スタート画面などからMicrosoft Storeにアクセスしてubuntuと検索してください。 様々なバージョンが表示されますが、ここではUbuntu20.04LTSをダウンロードしましょう。（ちななみにLTSはLong Time Supportの略、つまり安定板のようなものです） ダウンロード出来たらスタート画面などから先ほどダウンロードしたUbuntu20.04LTSを起動してください。 ","date":"2022-05-29","objectID":"/nlp100-env/:3:1","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"Pyenvの導入 Pythonのバージョン管理に便利なPyenvを導入します。 なぜバージョンなんて管理するの？と思われるかもしれません。 言語処理100本ノックを解く上では１つのバージョンで事足りますが、Pythonを使っていると使いたいライブラリが一定のバージョンにしか対応していないなどということがかなりの頻度で現れます。 そんなときにPyenvでバージョンを管理しておくと1つのコマンドを打つだけで好きなバージョンのPythonに切り替えることができます。よって本記事ではPyenvの使用を強く推奨します。 Pyenvの導入は簡単で、WSL上で以下のコマンドをすべて打つだけで終わりです。 # 依存パッケージの導入 $ sudo apt install -y build-essential $ sudo apt install -y libffi-dev $ sudo apt install -y libssl-dev # openssl $ sudo apt install -y zlib1g-dev $ sudo apt install -y libbz2-dev libreadline-dev libsqlite3-dev # sqlite3, bz2, readline $ sudo apt install -y git $ cd $ git clone https://github.com/pyenv/pyenv.git ~/.pyenv # .bashrcの更新 $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' \u003e\u003e ~/.bashrc $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' \u003e\u003e ~/.bashrc $ echo 'eval \"$(pyenv init --path)\"' \u003e\u003e ~/.bashrc $ echo -e 'if command -v pyenv 1\u003e/dev/null 2\u003e\u00261; then\\n eval \"$(pyenv init -)\"\\nfi' \u003e\u003e ~/.bashrc $ source ~/.bashrc # pyenvがインストールできたかを確認 $ pyenv -v 以上のコマンドをすべて打ち終えた段階で、勝手にPyenvが導入完了しているはずです。 出来ていないようであればコメントください。 ","date":"2022-05-29","objectID":"/nlp100-env/:3:2","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"Pyenvの使い方 # インストール可能なpythonのバージョンを表示 $ pyenv install --list # pythonのインストール(3.8.10をインストールする場合)　 $ pyenv install 3.8.10 # 使うPythonのバージョンを3.8.10に切り替え $ pyenv global 3.8.10 # 切り替わっているかの確認 $ python -V ","date":"2022-05-29","objectID":"/nlp100-env/:3:3","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"必要な諸ライブラリの導入 ダウンロードしたばかりのPythonには何のライブラリも入っていません。ですが、一から必要なライブラリをすべて羅列するのもなと思ったので、簡単にダウンロードできるようにファイルを用意しました。 こちらのページに必要なライブラリが記載されたファイルがあるのでダウンロードして、requirements.txtのある場所で以下のコマンドを実行してください。 $ pip install -r requirements.txt なお、私自身が解いた時に使用したライブラリであるため、このファイルには解き方によっては必要がないものもありますが、ご了承ください。 これで言語処理100本ノックに必要なPythonのライブラリに関してはすべて導入完了です。 ","date":"2022-05-29","objectID":"/nlp100-env/:3:4","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"MeCabの導入(第4章で必要) これに関してもコマンド2つで導入ができます。サクサク行きましょう！ $ sudo apt update $ sudo apt install mecab mecab-ipadic-utf8 libmecab-dev swig ","date":"2022-05-29","objectID":"/nlp100-env/:3:5","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"CaboChaの導入(第5章で必要) CabocChaは第5章で必要になる係り受け解析用ツールです。 まずは依存パッケージであるCRF++を導入します。 このページから最新のものをダウンロードする（wgetでも出来なくはないけど上手くいかないこともある？） CRF++-0.58.tar.gzのあるディレクトリで以下のコマンドを使う。 $ tar xzvf CRF++-0.58.tar.gz $ cd CRF++-0.58 $ ./configure $ make $ sudo make install 続いてCaboCha本体の導入です。 このページからから最新のものをダウンロードする（wgetでも出来なくはないけど上手くいかないこともある？） cabocha-0.69.tar.bz2のあるディレクトリで以下のコマンドを使う。 $ tar xjvf cabocha-0.69.tar.bz2 $ cd cabocha-0.69 $ ./configure --with-charset=utf8 $ make $ sudo make install ","date":"2022-05-29","objectID":"/nlp100-env/:3:6","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":["環境構築"],"content":"おわりに 以上で言語処理100本ノックのための環境構築はすべて完了です！ それぞれのコマンドの意味の解説はしていないので知らずのうちに環境構築ができてしまったという感じだと思います。 その辺に関してもし知りたい場合は調べてください…w もし分からない部分や「実行したのに動かない！」などがあれば気軽にコメントやTwitterのほうに連絡をください。 Twitterのほうが反応が早いです。 @ryu1104_m ","date":"2022-05-29","objectID":"/nlp100-env/:4:0","tags":["環境構築","Python","WSL","NLP"],"title":"言語処理100本ノックのための環境構築","uri":"/nlp100-env/"},{"categories":null,"content":"About Ryutaro-A 所属 電気通信大学大学院 稲葉研究室 修士１年 趣味 旅行/ゲーム/読書 ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"","uri":"/about/"},{"categories":null,"content":"スライド一覧 ここでは論文紹介などで使ったスライドが閲覧できます。 ","date":"0001-01-01","objectID":"/slides/:0:0","tags":null,"title":"","uri":"/slides/"},{"categories":null,"content":"論文紹介 ","date":"0001-01-01","objectID":"/slides/:1:0","tags":null,"title":"","uri":"/slides/"},{"categories":null,"content":"Other Roles Matter! Enhancing Role-Oriented Dialogue Summarization via Role Interactions ","date":"0001-01-01","objectID":"/slides/:1:1","tags":null,"title":"","uri":"/slides/"}]